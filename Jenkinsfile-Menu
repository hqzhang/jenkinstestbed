//////////////use shared library same with Jenkinsfile///////////
def repo = scm.getUserRemoteConfigs()[0].toString()
repo = repo.replace(' (null)','').replace('null => ','')
def brch= scm.branches[0].toString().replace('*/','')
def shlib = library identifier: "bitbucket-groovytest-lib@${brch}", retriever: modernSCM(
  [$class: 'GitSCMSource', remote: repo, credentialsId: ''])
def myLib = shlib.com.wc.shlib
//def myDyn = myLib.Class.builder(this)
//println myLib.Cons.MAVEN
//println myLib.Class.sayHello('HQ')
println foo('HQ')
import groovy.json.JsonSlurper
println "------branch=${brch}"
//def jobstr = Thread.currentThread().toString()
def jobstr="${env.JOB_NAME}"
println "jobstr:$jobstr"
def wksp=Utils.getSth()
println "wksp=$wksp"
println "---------list all envar------------"
println "build=${env.BUILD_URL}"
env.getEnvironment().each { name, value -> println "env.${name}=${value}" }

@groovy.transform.Field
def mybrch="{brch}"
@groovy.transform.Field
def envList=['DEV','BAT']
@groovy.transform.Field
def serversList=[DEV: ['s111','ss222','ss333'],
                 BAT: ['s444','s555','s666'] ] 
@groovy.transform.Field
def defaultList=['ss333', 's555']
@groovy.transform.Field
def target="hongqizhang@localhost"
println "**********"

println "***********"
//import com.wavecloud.Hello;
//def hl=new Hello()
//println hl.hello("WORLD HQ!")
String buildDefault(List out,String key){
   def ret=[]
   out.each{ if(it.contains(key)){ ret.add(0, it) } else { ret.add(it) } }
   if (ret.isEmpty()) {return ['NotFound']}
   return ret
}
String setDefault(List out,String key){
   def ret=[]
   out.each{ if(it.contains(key)){ ret.add(0,'"'+it+'"') }  else { ret.add('"'+it+'"') } } 
   if (ret.isEmpty()) {return ['NotFound']}
   return ret
}         
String getServerList(String refvar){
    def map=[:]
    envList.eachWithIndex{ it,index->
       map[it]=setDefault(serversList[it],defaultList[index])
    }
    return """def map=${map}
    |return map[${refvar}]
    |""".stripMargin()
}

def getPackList(String mypath, String dft){
    println("enter getPack()")
    ret=[]
    def out="ssh ${target} ls ${mypath}/*.tar.gz".execute().text
    println "out=$out"
    out.readLines().each{ if( it.contains(dft) ){ ret.add(0,'"'+it+'"') } else { ret.add('"'+it+'"') } }
    if (ret.isEmpty()) {return ['NotFound']}
    return """ return ${ret} """
}         
def getPackScript(String mypath, String dft){
  println("enter getPackScript()")
  return """ret=[]
  |def out="ssh ${target} ls ${mypath}/*.tar.gz".execute().text
  |out.readLines().each{ if( it.contains(\"${dft}\") ){ ret.add(0,it) } else { ret.add(it) } }
  |return ret
  |""".stripMargin()
}
/*
def getFileList(String wksp, String dft){
    println("enter getFile()")
    def ret=[]
    def out="ls ${wksp}/release  ".execute().text
    println "out=$out"
    out.readLines().each{ 
        if( it.contains(dft) ){ ret.add(0,'"'+it+'"') } 
    else { ret.add"'+it+'"') } }
    if (ret.isEmpty()) {return ['NotFound']}
    }
    return """ return ${ret} """
}  */              
def getFileScript(String wksp, String dft){
    println("enter getFileScript()....")
  return """def ret=[]
  |def out="ls ${wksp}/release  ".execute().text
  |out.readLines().each{ if( it.contains(\"${dft}\") ){ ret.add(0,it) } else { ret.add(it) } }
  |if (ret.isEmpty()) {return ['NotFound']}
  |return ret
  |""".stripMargin()
}
def getContentScript(String wksp, String refvar,String brch ){
    println("enter getContentScript()....")
    return """
    |def out="cat ${wksp}/\${${refvar}}".execute().text
    |out="curl https://bitbucket.org/wave-cloud/groovytest/raw/${brch}/\${${refvar}}".execute().text
    |out=out.replaceAll('components:\\n','')
    |return \"\"\" <textarea name=\"value\"  value  class=\"setting-input  \" type=\"text\" rows="10" cols="25">\${out}</textarea> \"\"\"
    | """.stripMargin()
}

String getBranchList(String repo, String dft ){
   def ret=[]
   def out = "git ls-remote --heads ${repo}".execute().text
   out = out.readLines().collect { it.split()[1].replaceAll('refs/heads/', '') }
   out.each{ if( it.contains(dft) ){ ret.add(0,'"'+it+'"') } else { ret.add('"'+it+'"') } }
   return """ return ${ret} """
}
String getBranchScript(String repo, String dft ){
   return """def ret=[]
   |def out = "git ls-remote --heads ${repo}".execute().text
   |out = out.readLines().collect { it.split()[1].replaceAll('refs/heads/', '') }
   |out.each{ if( it.contains(\"${dft}\") ){ ret.add(0,it) } else { ret.add(it) } }
   |return ret
   | """.stripMargin()
}
String getFileHubList(String repo, String folder,String brch ){
   println "Enter getFileHubList()"
   def ret=[]
   def cmd = """curl https://api.github.com/repos/${repo}/git/trees/${brch}?recursive=2  """
   def out = cmd.execute().text
   //println "out=$out"
   def jsonSlurper = new JsonSlurper()
   def obj = jsonSlurper.parseText(out)
   obj['tree'].each{ if(it['path'].contains(folder) ) { ret.add('"'+it['path']+'"')}  }
   //println "obj=$obj"
   if (ret.isEmpty()) {return ['NotFound']}
   return """ return ${ret} """

}

String getFileHubScript(String repo, String folder,String brch ){
   return """import groovy.json.JsonSlurper
   |def ret=[]
   |def cmd = "curl https://api.github.com/repos/${repo}/git/trees/${brch}?recursive=2  "
   |def out = cmd.execute().text
   |def jsonSlurper = new JsonSlurper()
   |def obj = jsonSlurper.parseText(out)
   |obj['tree'].each{ if(it['path'].contains("${folder}/") ) { ret.add(it['path'])}  }
   |if (ret.isEmpty()) {return ['NotFound']}
   |return ret
   | """.stripMargin()
}

def getFileBitList(String repo, String folder, String brch){
    println "ener getFileBit()"
    def repoPR="https://api.bitbucket.org/2.0/repositories/$repo/src/${brch}/release"
    def ret=[]
    def cmd="curl --request GET ${repoPR}  "
    println "$cmd"
    def out=cmd.execute().text
    def json=new JsonSlurper()
    def obj=json.parseText(out)
    obj['values'].each { ret.add('"'+it['path']+'"')}
    if (ret.isEmpty()) {return ['NotFound']}
    return """ return ${ret} """
    
}

def getFileBitScript(String repo, String folder, String brch){
    return """import groovy.json.JsonSlurper
    |def ret=[]
    |def repoPR="https://api.bitbucket.org/2.0/repositories/${repo}/src/${brch}/release"
    |def cmd="curl --request GET \${repoPR}  "
    |def out=cmd.execute().text
    |def json=new JsonSlurper()
    |def obj=json.parseText(out)
    |obj['values'].each { ret.add(it['path'])}
    |if (ret.isEmpty()) {return ['NotFound']}
    |return ret
    | """.stripMargin()
}
def verify(String brch){
   def SolutionConfig="solution.yaml"
   def out="cat /var/root/.jenkins/workspace/agroovytest/release/${SolutionConfig}".execute().text
   out="curl https://bitbucket.org/wave-cloud/groovytest/raw/${brch}/release/${SolutionConfig}".execute().text
   out=out.replaceAll('components:\n','')
   return """ <textarea name="value"  value  class="setting-input  " type="text" rows="10" cols="25">${out}</textarea> """
}

   
println menu.getContentScript("SolutionConfig")
//println menu.getTypeScript()
//println menu.getTypeVerify()
//println menu.verifytest()
//println menu.verify2('release/a.yaml')

println "---------parameters start------------"
properties([
    //pipelineTriggers([bitbucketPush()]),
    parameters([
        base64File('myfile64'), 
            file('myfile') ,    
            separator(name: "building"),
            choice( name: 'Environment', description: '', choices: buildDefault(envList,'BAT') ),
            //choice( name: 'getBranches', description: '', choices: getBranches(repo, 'master') ),
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'getBranchList', randomName: 'choice-parameter-16677189047440', referencedParameters: 'Environment', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getBranchList(repo,brch) ]]],

            //choice( name: 'getFileHub', description: '', choices: getFileHub("hqzhang/groovytest","releases",'mytest') ),
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'getFileHubScript', randomName: 'choice-parameter-16677189047450', referencedParameters: 'Environment', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getFileHubList("hqzhang/groovytest","release",'mytest') ]]],
            //choice( name: 'getFileBit', description: '', choices: getFileBit("wave-cloud/groovytest","release",brch) ),
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'getFileBitScript', randomName: 'choice-parameter-16677189047460', referencedParameters: 'Environment', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getFileBitScript("wave-cloud/groovytest","release",brch) ]]],
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_MULTI_SELECT', filterLength: 1, filterable: false,
               name: 'Server', randomName: 'choice-parameter-16677189047472', referencedParameters: 'Environment', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getServerList('Environment') ]]],

            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'Package', randomName: 'choice-parameter-16677189047489', referencedParameters: 'filebackup', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: getPackList('~/workspace/myscripts','myfile') ]]],

            [ $class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'SolutionConfig', randomName: 'choice-parameter-16677189047798', referencedParameters: 'startRollback', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: menu.getFileBitScript('startRollback')  ]]],

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', 
                name: 'Component',omitValueField: false, randomName: 'choice-parameter-138673186839723', referencedParameters: 'SolutionConfig', 
                script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                script: [classpath: [], oldScript: '', sandbox: true, 
                script: menu.getContentScript('SolutionConfig')]] ], 

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', name: 'Components', 
                   name: 'Components', omitValueField: false, randomName: 'choice-parameter-138673186839723', referencedParameters: 'SolutionConfig', 
                   script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                    script: [classpath: [], oldScript: '', sandbox: true, 
                    script: menu.getContentTable('SolutionConfig' )]] ],

            booleanParam( name: 'startRollback',  defaultValue: true),

            [ $class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'RollbackList', randomName: 'choice-parameter-16687189047799', referencedParameters: 'startRollback', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: menu.getRollbackList('startRollback','PRIOR') ]]],

            [ $class: 'CascadeChoiceParameter', choiceType: 'PT_CHECKBOX', filterLength: 1, filterable: false,
               name: 'RollbackTypeList', randomName: 'choice-parameter-16677189047799', referencedParameters: 'RollbackList', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: true, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: true, 
               script: menu.getTypeScript('RollbackList')  ]]],

            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML',  omitValueField: false, 
                    name: 'filebackup',randomName: 'choice-parameter-138673286839723', referencedParameters: 'SolutionConfig', 
                    script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                    script: [classpath: [], oldScript: '', sandbox: true, 
                    script: menu.getString('SolutionConfig')]] ],
            [$class: 'DynamicReferenceParameter', choiceType: 'ET_TEXT_BOX',  omitValueField: false, 
                    name: 'filebackup1',randomName: 'choice-parameter-138683286839723', referencedParameters: 'SolutionConfig', 
                    script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                    script: [classpath: [], oldScript: '', sandbox: true, 
                    script: menu.getStringInstant('SolutionConfig')]] ],
            separator(name: "end"), 
              
            
])
])////
//mypipeline( params )

println "-----------begin pipeline-------"
def map
def list
def remote = [:]
remote.name = "root"
remote.host = "192.168.0.16"
remote.allowAnyHosts = true
//println menu.getCompList('mypack')
//println menu.gitCompVerify()
pipeline {
    agent any
    stages {
        stage('Create List') {
            steps {
                script {
                    echo "STAGE: create List..."
                    myMethods.greet("Alice")
                    echo "params======$params"
                    echo "components=${env.compNames}"
                    echo "init=$env.initMenu"
                    println "get use function"
                    def comps=["b","a"]
                    def versions=["1","2"]
                    comps.eachWithIndex{ var, id->
                          echo "com=$comps[id]"
                          echo "ver=$versions[id]"

                    }
                     
                        sh """
                        echo comp
                        """
                  
                    if (currentBuild.previousBuild) {
                        try {
                            copyArtifacts(projectName: currentBuild.projectName,
                                          selector: specific("${currentBuild.previousBuild.number}"))
                            def previousFile = readFile(file: "usefulfile.txt")
                            echo("The current build is ${currentBuild.number}")
                            echo("The previous build artifact was: ${previousFile}")
                        } catch(err) {
                            // ignore error
                        }
                    }
                
                    //println menu.getCompList('mypack')
                    def build="${env.BUILD_NUMBER}"
                    println build
                    sh "echo ${build} > usefulfile.txt"
                    archiveArtifacts artifacts: 'usefulfile.txt', fingerprint: true
    
                }

            }
        }
    }
   post {
        always {
            //archiveArtifacts artifacts: 'file.extension', fingerprint: true
            println "do nothing"
        }
    }
}

