//////

def brch= scm.branches[0].toString()
brch=brch.substring(2,)
library("bitbucket-groovytest-lib@${brch}") _
println "------branch=${brch}"
menu.getEnvar()
wksp=env.WKSP
build_no =env.BLDNo
repo=env.REPO
brch=env.BRCH
jobstr=env.JOBSTR
println "------wksp=${wksp}"
println "------jobstr=${jobstr}"
println "------build_no=${build_no}"
println "------repo=${repo}"
println "------brch=${brch}"

println "call getFileList"
//println menu.getFileList('solution',wksp) 
println "call getContent100"
//println menu.getContent100('Config' ,wksp,repo,brch )
println "begin properties"
//println menu.getContent('Config' ,wksp,repo,brch )
//////
properties([
    pipelineTriggers([githubPush()]),
    parameters([
        separator(name: "building"),
		    
            choice( name: 'Soltail', description: '', choices: [ brch,jobstr,repo] ),
            booleanParam(name: 'initMenu', defaultValue: false, description: 'set for init menu'),
            string(name: 'DEPLOY', defaultValue: 'staging', description: ''),
            choice( name: 'Config', description: '', choices: menu.getFileList('solution',wksp) ),
            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', name: 'Components', omitValueField: false, 
            randomName: 'choice-parameter-138673186839723', referencedParameters: 'Config', 
            script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                     script: [classpath: [], oldScript: '', sandbox: false, 
                              script: menu.getContent100('Config' ,wksp,repo,brch )]] ],
            [$class: 'DynamicReferenceParameter', choiceType: 'ET_FORMATTED_HTML', name: 'Component', omitValueField: false, 
            randomName: 'choice-parameter-138673186839723', referencedParameters: 'Config', 
            script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''],
                     script: [classpath: [], oldScript: '', sandbox: false, 
                              script: menu.getContent('Config' ,wksp,repo,brch )]] ],*/
            string(name: 'filebackup', defaultValue: 'backup.yaml', description: 'input file to backup')
             
])
])
println "begin pipeline"
def map
def list
pipeline {
    agent any
    stages {
        stage('Create List') {
            steps {
                script {
                    echo "STAGE: create List..."
                    echo "params=$params"
                    echo "init=$env.initMenu"
                    if ( env.initMenu.toBoolean() == true ){
                        echo "Menu is initialized Successfully!"
                        return
                    }
                    echo "parsing yaml"
                    println ("Components={env.Components}") 
                    println ("Component={env.Component}")
                    if ( env.Components == '' ){
                        echo "Components is not SET"
                        sh 'exit 1'
                    }
                    def file = new File("${wksp}/releases/${filebackup}")
                    echo  "file Exist: ${file.exists()}"
                    if (file.exists()) {
                        echo "delete file"
                        file.delete()
                    }
                    echo  "file Exist: ${file.exists()}"
                    //def multiLineStr = params.Components.replaceAll(/\\n/,"\n").replaceAll(',','')
                    def read = menu.stringParse(env.Components)
                    writeYaml file: "${wksp}/releases/${filebackup}", data: read
                    sh "cat releases/${filebackup}"
                   
    
                }
            }
        }
   }
}