
String buildDefault(List out,String key){
   def tmp=[]
   out.eachWithIndex{ it,id-> 
   if(it.contains(key)){ tmp.add(0, '"'+it+'"') } else { tmp.add('"'+it+'"') } }
   return tmp
}         
def getFile(String mypath,String type, String dft){
    println("enter getFile()")
    def out="ssh root@192.168.0.16 ls ${mypath}/*.${type}".execute().text
    out=out.readLines().collect{it}
    out.eachWithIndex{ it, id-> 
    if ( it.contains(dft) ){ index=id } }
    out.add(0, out.remove(index))
    return out
}         

def getFileScript(String mypath,String type, String dft){
  return """def index=0
  |def out="ssh root@192.168.0.16 ls ${mypath}/*.${type}".execute().text
  |out=out.readLines().collect{it}
  |out.eachWithIndex{ it, id-> 
  |if ( it.contains(\"${dft}\") ){ index=id } }
  |out.add(0, out.remove(index))
  |return out
  |""".stripMargin()
}
println getFileScript('/root/workspace/myscripts','tar.gz','myfile')
println getFile('/root/workspace/myscripts','tar.gz','myfile')
properties([
    //pipelineTriggers([bitbucketPush()]),
    parameters([
            text( name: 'multlines', description: '', defaultValue: "a\n b\n c"),
            choice( name: 'mypack', description: '', choices: getFile('/root/workspace/myscripts','tar.gz','myfile') ),
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'dynpack', randomName: 'choice-parameter-16677189047472', referencedParameters: 'mypack', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: false, 
               script:getFileScript('/root/workspace/myscripts/','tar.gz','myfile') ]]],
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT', filterLength: 1, filterable: false,
               name: 'secpack', randomName: 'choice-parameter-16677189047472', referencedParameters: 'mypack', 
               script: [$class: 'GroovyScript', fallbackScript: [classpath: [], oldScript: '', sandbox: false, script: ''], 
               script: [classpath: [], oldScript: '', sandbox: false, 
               script:getFileScript('/root/workspace/myscripts','tar.gz','myfile') ]]],
        ])])
pipeline {
  agent any

  stages {
    stage('Demo Active Choices Parameter') {
      steps {
        echo "$params"
        //echo "File Selected ${file}"
        //echo "Content Selected ${components}"
      }
    }
    stage('call anther job') {
      steps {
        echo "$params"
        build job: 'acgroovytest'
    /*parameters: [
        string(name: 'passed_build_number_param', value: String.valueOf(BUILD_NUMBER)),
        string(name: 'complex_param', value: 'prefix-' + String.valueOf(BUILD_NUMBER))
    ]*/
      }
    }
  }
}
